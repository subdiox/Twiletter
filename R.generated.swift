//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 18 images.
  struct image {
    /// Image `camera`.
    static let camera = Rswift.ImageResource(bundle: R.hostingBundle, name: "camera")
    /// Image `close`.
    static let close = Rswift.ImageResource(bundle: R.hostingBundle, name: "close")
    /// Image `compose_bar`.
    static let compose_bar = Rswift.ImageResource(bundle: R.hostingBundle, name: "compose_bar")
    /// Image `compose`.
    static let compose = Rswift.ImageResource(bundle: R.hostingBundle, name: "compose")
    /// Image `draft`.
    static let draft = Rswift.ImageResource(bundle: R.hostingBundle, name: "draft")
    /// Image `heart`.
    static let heart = Rswift.ImageResource(bundle: R.hostingBundle, name: "heart")
    /// Image `login_button`.
    static let login_button = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_button")
    /// Image `message_gray`.
    static let message_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_gray")
    /// Image `message_tab`.
    static let message_tab = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_tab")
    /// Image `notification_tab`.
    static let notification_tab = Rswift.ImageResource(bundle: R.hostingBundle, name: "notification_tab")
    /// Image `photo`.
    static let photo = Rswift.ImageResource(bundle: R.hostingBundle, name: "photo")
    /// Image `profile_tab`.
    static let profile_tab = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile_tab")
    /// Image `reply`.
    static let reply = Rswift.ImageResource(bundle: R.hostingBundle, name: "reply")
    /// Image `retweet`.
    static let retweet = Rswift.ImageResource(bundle: R.hostingBundle, name: "retweet")
    /// Image `search_tab`.
    static let search_tab = Rswift.ImageResource(bundle: R.hostingBundle, name: "search_tab")
    /// Image `share_gray`.
    static let share_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "share_gray")
    /// Image `star`.
    static let star = Rswift.ImageResource(bundle: R.hostingBundle, name: "star")
    /// Image `timeline_tab`.
    static let timeline_tab = Rswift.ImageResource(bundle: R.hostingBundle, name: "timeline_tab")
    
    /// `UIImage(named: "camera", bundle: ..., traitCollection: ...)`
    static func camera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.camera, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "close", bundle: ..., traitCollection: ...)`
    static func close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "compose", bundle: ..., traitCollection: ...)`
    static func compose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.compose, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "compose_bar", bundle: ..., traitCollection: ...)`
    static func compose_bar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.compose_bar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "draft", bundle: ..., traitCollection: ...)`
    static func draft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.draft, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "heart", bundle: ..., traitCollection: ...)`
    static func heart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heart, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "login_button", bundle: ..., traitCollection: ...)`
    static func login_button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_button, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "message_gray", bundle: ..., traitCollection: ...)`
    static func message_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_gray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "message_tab", bundle: ..., traitCollection: ...)`
    static func message_tab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_tab, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "notification_tab", bundle: ..., traitCollection: ...)`
    static func notification_tab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notification_tab, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "photo", bundle: ..., traitCollection: ...)`
    static func photo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "profile_tab", bundle: ..., traitCollection: ...)`
    static func profile_tab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile_tab, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "reply", bundle: ..., traitCollection: ...)`
    static func reply(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.reply, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "retweet", bundle: ..., traitCollection: ...)`
    static func retweet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.retweet, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "search_tab", bundle: ..., traitCollection: ...)`
    static func search_tab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search_tab, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share_gray", bundle: ..., traitCollection: ...)`
    static func share_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share_gray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "star", bundle: ..., traitCollection: ...)`
    static func star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "timeline_tab", bundle: ..., traitCollection: ...)`
    static func timeline_tab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.timeline_tab, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `SignInCell`.
    static let signInCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "SignInCell")
    /// Reuse identifier `TimelineCell`.
    static let timelineCell: Rswift.ReuseIdentifier<TimelineTableViewCell> = Rswift.ReuseIdentifier(identifier: "TimelineCell")
    /// Reuse identifier `TweetCell`.
    static let tweetCell: Rswift.ReuseIdentifier<TweetTableViewCell> = Rswift.ReuseIdentifier(identifier: "TweetCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `TimelineViewController`, and contains static references to 1 segues.
    struct timelineViewController {
      /// Segue identifier `ToTweetViewSegue`.
      static let toTweetViewSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TimelineViewController, TweetViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ToTweetViewSegue")
      
      /// Optionally returns a typed version of segue `ToTweetViewSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toTweetViewSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TimelineViewController, TweetViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.timelineViewController.toTweetViewSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `Account`.
    static let account = _R.storyboard.account()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "Account", bundle: ...)`
    static func account(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.account)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
    }
    
    struct account: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Account"
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let compose = StoryboardViewControllerResource<ComposeViewController>(identifier: "Compose")
      let main = StoryboardViewControllerResource<UIKit.UITabBarController>(identifier: "Main")
      let messageViewController = StoryboardViewControllerResource<MessageViewController>(identifier: "MessageViewController")
      let name = "Main"
      let notificationViewController = StoryboardViewControllerResource<NotificationViewController>(identifier: "NotificationViewController")
      let profileViewController = StoryboardViewControllerResource<ProfileViewController>(identifier: "ProfileViewController")
      let searchViewController = StoryboardViewControllerResource<SearchViewController>(identifier: "SearchViewController")
      let timeline = StoryboardViewControllerResource<TimelineViewController>(identifier: "Timeline")
      let tweet = StoryboardViewControllerResource<TweetViewController>(identifier: "Tweet")
      
      func compose(_: Void = ()) -> ComposeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: compose)
      }
      
      func main(_: Void = ()) -> UIKit.UITabBarController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: main)
      }
      
      func messageViewController(_: Void = ()) -> MessageViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: messageViewController)
      }
      
      func notificationViewController(_: Void = ()) -> NotificationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notificationViewController)
      }
      
      func profileViewController(_: Void = ()) -> ProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileViewController)
      }
      
      func searchViewController(_: Void = ()) -> SearchViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchViewController)
      }
      
      func timeline(_: Void = ()) -> TimelineViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: timeline)
      }
      
      func tweet(_: Void = ()) -> TweetViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tweet)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "star") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'star' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profile_tab") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profile_tab' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "retweet") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'retweet' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "search_tab") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'search_tab' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "draft") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'draft' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "reply") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'reply' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "close") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'close' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "message_tab") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'message_tab' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "photo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'photo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "camera") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'camera' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "share_gray") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'share_gray' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "timeline_tab") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'timeline_tab' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "notification_tab") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'notification_tab' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().main() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'main' could not be loaded from storyboard 'Main' as 'UIKit.UITabBarController'.") }
        if _R.storyboard.main().timeline() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'timeline' could not be loaded from storyboard 'Main' as 'TimelineViewController'.") }
        if _R.storyboard.main().tweet() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tweet' could not be loaded from storyboard 'Main' as 'TweetViewController'.") }
        if _R.storyboard.main().messageViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'messageViewController' could not be loaded from storyboard 'Main' as 'MessageViewController'.") }
        if _R.storyboard.main().compose() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'compose' could not be loaded from storyboard 'Main' as 'ComposeViewController'.") }
        if _R.storyboard.main().profileViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileViewController' could not be loaded from storyboard 'Main' as 'ProfileViewController'.") }
        if _R.storyboard.main().searchViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchViewController' could not be loaded from storyboard 'Main' as 'SearchViewController'.") }
        if _R.storyboard.main().notificationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notificationViewController' could not be loaded from storyboard 'Main' as 'NotificationViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
